# White/blue palette for actual population.
nc <- 1000
map.data <- data.frame(state=states,
value=pop,
colorIndex=integer(length(pop)),
color=character(length(pop)),
stringsAsFactors=FALSE)
colors <- colorRampPalette(c("white","darkblue"))(nc)
slope <- nc / max(map.data$value)
for (i in 1:length(map.data$value)) {
map.data$colorIndex[i] <- round(map.data$value[i] * slope)
if (map.data$colorIndex[i] == 0) map.data$colorIndex[i] <- 1
map.data$color[i] <- colors[map.data$colorIndex[i]]
}
md <- map.data[with(map.data,order(-value)),]
map("state",regions=map.data$state,fill=TRUE,col=map.data$color,proj="polyconic")
# Red/white/green palette for changes in population.
nc <- 50        # One half the number of colors.
map.data <- data.frame(states,
value=delta,
colorIndex=integer(length(delta)),
color=character(length(delta)),
stringsAsFactors=FALSE)
inc.colors <- colorRampPalette(c("darkgreen","white"))(nc)
inc.slope = abs(nc / max(map.data$value))
dec.colors <- colorRampPalette(c("white","darkred"))(nc)
dec.slope = abs(nc / min(map.data$value))
for (i in 1:length(map.data$value)) {
if (map.data$value[i] < 0) {
map.data$colorIndex[i] <- round(abs(map.data$value[i] * dec.slope))
if (map.data$colorIndex[i] == 0) map.data$colorIndex[i] <- 1
map.data$color[i] <- dec.colors[map.data$colorIndex[i]]
}
else {
map.data$colorIndex[i] <- round(abs(map.data$value[i] * inc.slope))
if (map.data$colorIndex[i] == 0) map.data$colorIndex[i] <- 1
map.data$color[i] <- inc.colors[map.data$colorIndex[i]]
}
}
map("state",proj="polyconic",fill=TRUE,col=map.data$color)
md
}
drawMaps(census.data$state,census.data$pop2015,census.data$delta2015)
?colorRampPalette
drawMaps <- function(states,pop,delta) {
# Initialize plot region.
par(mfrow=c(2,1))
par(mar=c(0,0,0,0))
# White/blue palette for actual population.
nc <- 1000
map.data <- data.frame(state=states,
value=pop,
colorIndex=integer(length(pop)),
color=character(length(pop)),
stringsAsFactors=FALSE)
colors <- colorRampPalette(c("white","darkblue"),space="rgb")(nc)
slope <- nc / max(map.data$value)
for (i in 1:length(map.data$value)) {
map.data$colorIndex[i] <- round(map.data$value[i] * slope)
if (map.data$colorIndex[i] == 0) map.data$colorIndex[i] <- 1
map.data$color[i] <- colors[map.data$colorIndex[i]]
}
md <- map.data[with(map.data,order(-value)),]
map("state",regions=map.data$state,fill=TRUE,col=map.data$color,proj="polyconic")
# Red/white/green palette for changes in population.
nc <- 50        # One half the number of colors.
map.data <- data.frame(states,
value=delta,
colorIndex=integer(length(delta)),
color=character(length(delta)),
stringsAsFactors=FALSE)
inc.colors <- colorRampPalette(c("darkgreen","white"))(nc)
inc.slope = abs(nc / max(map.data$value))
dec.colors <- colorRampPalette(c("white","darkred"))(nc)
dec.slope = abs(nc / min(map.data$value))
for (i in 1:length(map.data$value)) {
if (map.data$value[i] < 0) {
map.data$colorIndex[i] <- round(abs(map.data$value[i] * dec.slope))
if (map.data$colorIndex[i] == 0) map.data$colorIndex[i] <- 1
map.data$color[i] <- dec.colors[map.data$colorIndex[i]]
}
else {
map.data$colorIndex[i] <- round(abs(map.data$value[i] * inc.slope))
if (map.data$colorIndex[i] == 0) map.data$colorIndex[i] <- 1
map.data$color[i] <- inc.colors[map.data$colorIndex[i]]
}
}
map("state",proj="polyconic",fill=TRUE,col=map.data$color)
md
}
m <- drawMaps(census.data$state,census.data$pop2015,census.data$delta2015)
head(m,10)
drawMaps <- function(states,pop,delta) {
# Initialize plot region.
par(mfrow=c(2,1))
par(mar=c(0,0,0,0))
# White/blue palette for actual population.
nc <- 1000
map.data <- data.frame(state=states,
value=pop,
colorIndex=integer(length(pop)),
color=character(length(pop)),
stringsAsFactors=FALSE)
colors <- colorRampPalette(c("white","darkblue"),space="rgb",interpolate="linear")(nc)
slope <- nc / max(map.data$value)
for (i in 1:length(map.data$value)) {
map.data$colorIndex[i] <- round(map.data$value[i] * slope)
if (map.data$colorIndex[i] == 0) map.data$colorIndex[i] <- 1
map.data$color[i] <- colors[map.data$colorIndex[i]]
}
md <- map.data[with(map.data,order(-value)),]
map("state",regions=map.data$state,fill=TRUE,col=map.data$color,proj="polyconic")
# Red/white/green palette for changes in population.
nc <- 50        # One half the number of colors.
map.data <- data.frame(states,
value=delta,
colorIndex=integer(length(delta)),
color=character(length(delta)),
stringsAsFactors=FALSE)
inc.colors <- colorRampPalette(c("darkgreen","white"))(nc)
inc.slope = abs(nc / max(map.data$value))
dec.colors <- colorRampPalette(c("white","darkred"))(nc)
dec.slope = abs(nc / min(map.data$value))
for (i in 1:length(map.data$value)) {
if (map.data$value[i] < 0) {
map.data$colorIndex[i] <- round(abs(map.data$value[i] * dec.slope))
if (map.data$colorIndex[i] == 0) map.data$colorIndex[i] <- 1
map.data$color[i] <- dec.colors[map.data$colorIndex[i]]
}
else {
map.data$colorIndex[i] <- round(abs(map.data$value[i] * inc.slope))
if (map.data$colorIndex[i] == 0) map.data$colorIndex[i] <- 1
map.data$color[i] <- inc.colors[map.data$colorIndex[i]]
}
}
map("state",proj="polyconic",fill=TRUE,col=map.data$color)
md
}
m <- drawMaps(census.data$state,census.data$pop2015,census.data$delta2015)
head(m,10)
drawMaps <- function(states,pop,delta) {
# Initialize plot region.
par(mfrow=c(2,1))
par(mar=c(0,0,0,0))
# White/blue palette for actual population.
nc <- 1000
map.data <- data.frame(state=states,
value=pop,
colorIndex=integer(length(pop)),
color=character(length(pop)),
stringsAsFactors=FALSE)
colors <- colorRampPalette(c("white","darkblue"),space="rgb",interpolate="spline")(nc)
slope <- nc / max(map.data$value)
for (i in 1:length(map.data$value)) {
map.data$colorIndex[i] <- round(map.data$value[i] * slope)
if (map.data$colorIndex[i] == 0) map.data$colorIndex[i] <- 1
map.data$color[i] <- colors[map.data$colorIndex[i]]
}
md <- map.data[with(map.data,order(-value)),]
map("state",regions=map.data$state,fill=TRUE,col=map.data$color,proj="polyconic")
# Red/white/green palette for changes in population.
nc <- 50        # One half the number of colors.
map.data <- data.frame(states,
value=delta,
colorIndex=integer(length(delta)),
color=character(length(delta)),
stringsAsFactors=FALSE)
inc.colors <- colorRampPalette(c("darkgreen","white"))(nc)
inc.slope = abs(nc / max(map.data$value))
dec.colors <- colorRampPalette(c("white","darkred"))(nc)
dec.slope = abs(nc / min(map.data$value))
for (i in 1:length(map.data$value)) {
if (map.data$value[i] < 0) {
map.data$colorIndex[i] <- round(abs(map.data$value[i] * dec.slope))
if (map.data$colorIndex[i] == 0) map.data$colorIndex[i] <- 1
map.data$color[i] <- dec.colors[map.data$colorIndex[i]]
}
else {
map.data$colorIndex[i] <- round(abs(map.data$value[i] * inc.slope))
if (map.data$colorIndex[i] == 0) map.data$colorIndex[i] <- 1
map.data$color[i] <- inc.colors[map.data$colorIndex[i]]
}
}
map("state",proj="polyconic",fill=TRUE,col=map.data$color)
md
}
m <- drawMaps(census.data$state,census.data$pop2015,census.data$delta2015)
head(m,10)
drawMaps <- function(states,pop,delta) {
# Initialize plot region.
par(mfrow=c(2,1))
par(mar=c(0,0,0,0))
# White/blue palette for actual population.
nc <- 1000
map.data <- data.frame(state=states,
value=pop,
colorIndex=integer(length(pop)),
color=character(length(pop)),
stringsAsFactors=FALSE)
colors <- colorRampPalette(c("white","darkblue"),space="rgb",interpolate="spline")(nc)
slope <- nc / max(map.data$value)
for (i in 1:length(map.data$value)) {
map.data$colorIndex[i] <- round(map.data$value[i] * slope)
if (map.data$colorIndex[i] == 0) map.data$colorIndex[i] <- 1
map.data$color[i] <- colors[map.data$colorIndex[i]]
}
md <- map.data[with(map.data,order(-value)),]
map.data$color[map.data$state=="california","state"] <- "californiaxx"
map("state",regions=map.data$state,fill=TRUE,col=map.data$color,proj="polyconic")
# Red/white/green palette for changes in population.
nc <- 50        # One half the number of colors.
map.data <- data.frame(states,
value=delta,
colorIndex=integer(length(delta)),
color=character(length(delta)),
stringsAsFactors=FALSE)
inc.colors <- colorRampPalette(c("darkgreen","white"))(nc)
inc.slope = abs(nc / max(map.data$value))
dec.colors <- colorRampPalette(c("white","darkred"))(nc)
dec.slope = abs(nc / min(map.data$value))
for (i in 1:length(map.data$value)) {
if (map.data$value[i] < 0) {
map.data$colorIndex[i] <- round(abs(map.data$value[i] * dec.slope))
if (map.data$colorIndex[i] == 0) map.data$colorIndex[i] <- 1
map.data$color[i] <- dec.colors[map.data$colorIndex[i]]
}
else {
map.data$colorIndex[i] <- round(abs(map.data$value[i] * inc.slope))
if (map.data$colorIndex[i] == 0) map.data$colorIndex[i] <- 1
map.data$color[i] <- inc.colors[map.data$colorIndex[i]]
}
}
map("state",proj="polyconic",fill=TRUE,col=map.data$color)
md
}
m <- drawMaps(census.data$state,census.data$pop2015,census.data$delta2015)
drawMaps <- function(states,pop,delta) {
# Initialize plot region.
par(mfrow=c(2,1))
par(mar=c(0,0,0,0))
# White/blue palette for actual population.
nc <- 1000
map.data <- data.frame(state=states,
value=pop,
colorIndex=integer(length(pop)),
color=character(length(pop)),
stringsAsFactors=FALSE)
colors <- colorRampPalette(c("white","darkblue"),space="rgb",interpolate="spline")(nc)
slope <- nc / max(map.data$value)
for (i in 1:length(map.data$value)) {
map.data$colorIndex[i] <- round(map.data$value[i] * slope)
if (map.data$colorIndex[i] == 0) map.data$colorIndex[i] <- 1
map.data$color[i] <- colors[map.data$colorIndex[i]]
}
md <- map.data[with(map.data,order(-value)),]
map.data$state[map.data$state=="california","state"] <- "californiaxx"
map("state",regions=map.data$state,fill=TRUE,col=map.data$color,proj="polyconic")
# Red/white/green palette for changes in population.
nc <- 50        # One half the number of colors.
map.data <- data.frame(states,
value=delta,
colorIndex=integer(length(delta)),
color=character(length(delta)),
stringsAsFactors=FALSE)
inc.colors <- colorRampPalette(c("darkgreen","white"))(nc)
inc.slope = abs(nc / max(map.data$value))
dec.colors <- colorRampPalette(c("white","darkred"))(nc)
dec.slope = abs(nc / min(map.data$value))
for (i in 1:length(map.data$value)) {
if (map.data$value[i] < 0) {
map.data$colorIndex[i] <- round(abs(map.data$value[i] * dec.slope))
if (map.data$colorIndex[i] == 0) map.data$colorIndex[i] <- 1
map.data$color[i] <- dec.colors[map.data$colorIndex[i]]
}
else {
map.data$colorIndex[i] <- round(abs(map.data$value[i] * inc.slope))
if (map.data$colorIndex[i] == 0) map.data$colorIndex[i] <- 1
map.data$color[i] <- inc.colors[map.data$colorIndex[i]]
}
}
map("state",proj="polyconic",fill=TRUE,col=map.data$color)
md
}
m <- drawMaps(census.data$state,census.data$pop2015,census.data$delta2015)
drawMaps <- function(states,pop,delta) {
# Initialize plot region.
par(mfrow=c(2,1))
par(mar=c(0,0,0,0))
# White/blue palette for actual population.
nc <- 1000
map.data <- data.frame(state=states,
value=pop,
colorIndex=integer(length(pop)),
color=character(length(pop)),
stringsAsFactors=FALSE)
colors <- colorRampPalette(c("white","darkblue"),space="rgb",interpolate="spline")(nc)
slope <- nc / max(map.data$value)
for (i in 1:length(map.data$value)) {
map.data$colorIndex[i] <- round(map.data$value[i] * slope)
if (map.data$colorIndex[i] == 0) map.data$colorIndex[i] <- 1
map.data$color[i] <- colors[map.data$colorIndex[i]]
}
md <- map.data[with(map.data,order(-value)),]
map.data[map.data$state=="california","state"] <- "californiaxx"
map("state",regions=map.data$state,fill=TRUE,col=map.data$color,proj="polyconic")
# Red/white/green palette for changes in population.
nc <- 50        # One half the number of colors.
map.data <- data.frame(states,
value=delta,
colorIndex=integer(length(delta)),
color=character(length(delta)),
stringsAsFactors=FALSE)
inc.colors <- colorRampPalette(c("darkgreen","white"))(nc)
inc.slope = abs(nc / max(map.data$value))
dec.colors <- colorRampPalette(c("white","darkred"))(nc)
dec.slope = abs(nc / min(map.data$value))
for (i in 1:length(map.data$value)) {
if (map.data$value[i] < 0) {
map.data$colorIndex[i] <- round(abs(map.data$value[i] * dec.slope))
if (map.data$colorIndex[i] == 0) map.data$colorIndex[i] <- 1
map.data$color[i] <- dec.colors[map.data$colorIndex[i]]
}
else {
map.data$colorIndex[i] <- round(abs(map.data$value[i] * inc.slope))
if (map.data$colorIndex[i] == 0) map.data$colorIndex[i] <- 1
map.data$color[i] <- inc.colors[map.data$colorIndex[i]]
}
}
map("state",proj="polyconic",fill=TRUE,col=map.data$color)
md
}
m <- drawMaps(census.data$state,census.data$pop2015,census.data$delta2015)
head(m,10)
drawMaps <- function(states,pop,delta) {
# Initialize plot region.
par(mfrow=c(2,1))
par(mar=c(0,0,0,0))
# White/blue palette for actual population.
nc <- 1000
map.data <- data.frame(state=states,
value=pop,
colorIndex=integer(length(pop)),
color=character(length(pop)),
stringsAsFactors=FALSE)
colors <- colorRampPalette(c("white","darkblue"),space="rgb",interpolate="spline")(nc)
slope <- nc / max(map.data$value)
for (i in 1:length(map.data$value)) {
map.data$colorIndex[i] <- round(map.data$value[i] * slope)
if (map.data$colorIndex[i] == 0) map.data$colorIndex[i] <- 1
map.data$color[i] <- colors[map.data$colorIndex[i]]
}
pd <- map.data[with(map.data,order(-value)),]
# map.data[map.data$state=="california","state"] <- "californiaxx"
map("state",regions=map.data$state,fill=TRUE,col=map.data$color,proj="polyconic")
# Red/white/green palette for changes in population.
nc <- 50        # One half the number of colors.
map.data <- data.frame(states,
value=delta,
colorIndex=integer(length(delta)),
color=character(length(delta)),
stringsAsFactors=FALSE)
inc.colors <- colorRampPalette(c("darkgreen","white"))(nc)
inc.slope = abs(nc / max(map.data$value))
dec.colors <- colorRampPalette(c("white","darkred"))(nc)
dec.slope = abs(nc / min(map.data$value))
for (i in 1:length(map.data$value)) {
if (map.data$value[i] < 0) {
map.data$colorIndex[i] <- round(abs(map.data$value[i] * dec.slope))
if (map.data$colorIndex[i] == 0) map.data$colorIndex[i] <- 1
map.data$color[i] <- dec.colors[map.data$colorIndex[i]]
}
else {
map.data$colorIndex[i] <- round(abs(map.data$value[i] * inc.slope))
if (map.data$colorIndex[i] == 0) map.data$colorIndex[i] <- 1
map.data$color[i] <- inc.colors[map.data$colorIndex[i]]
}
}
dd <- map.data[with(map.data,order(-value)),]
map("state",proj="polyconic",fill=TRUE,col=map.data$color)
data.frame(pd=pd,dd=dd)
}
m <- drawMaps(census.data$state,census.data$pop2015,census.data$delta2015)
head(m$dd,10)
head(m)
head(m,10)
m
?match.map
j <- match.map("state",regions=census.data$state,exact=TRUE,warn=TRUE)
j
length(j)
is.NA(j)
is.na(j)
sum(is.na(j))
sum(!is.na(j))
j <- match.map("state",regions=census.data$state,exact=FALSE,warn=TRUE)
j
length(j)
c("a","b","c")[c(2,3,1,1,3,2)]
c("a","b","c")[c(2,3,1,1,3,2,1)]
?map
drawMaps <- function(states,pop,delta) {
# Initialize plot region.
par(mfrow=c(2,1))
par(mar=c(0,0,0,0))
# White/blue palette for actual population.
nc <- 100
map.data <- data.frame(state=states,
value=pop,
colorIndex=integer(length(pop)),
color=character(length(pop)),
stringsAsFactors=FALSE)
colors <- colorRampPalette(c("white","darkblue"),space="rgb",interpolate="spline")(nc)
slope <- nc / max(map.data$value)
for (i in 1:length(map.data$value)) {
map.data$colorIndex[i] <- round(map.data$value[i] * slope)
if (map.data$colorIndex[i] == 0) map.data$colorIndex[i] <- 1
map.data$color[i] <- colors[map.data$colorIndex[i]]
}
pd <- map.data[with(map.data,order(-value)),]
# map.data[map.data$state=="california","state"] <- "californiaxx"
map("state",regions=census.data$state,exact=FALSE,proj="polyconic",fill=TRUE,
col=map.data$color[match.map("state",regions=census.data$state,exact=FALSE,warn=TRUE)])
# Red/white/green palette for changes in population.
nc <- 50        # One half the number of colors.
map.data <- data.frame(states,
value=delta,
colorIndex=integer(length(delta)),
color=character(length(delta)),
stringsAsFactors=FALSE)
inc.colors <- colorRampPalette(c("darkgreen","white"))(nc)
inc.slope = abs(nc / max(map.data$value))
dec.colors <- colorRampPalette(c("white","darkred"))(nc)
dec.slope = abs(nc / min(map.data$value))
for (i in 1:length(map.data$value)) {
if (map.data$value[i] < 0) {
map.data$colorIndex[i] <- round(abs(map.data$value[i] * dec.slope))
if (map.data$colorIndex[i] == 0) map.data$colorIndex[i] <- 1
map.data$color[i] <- dec.colors[map.data$colorIndex[i]]
}
else {
map.data$colorIndex[i] <- round(abs(map.data$value[i] * inc.slope))
if (map.data$colorIndex[i] == 0) map.data$colorIndex[i] <- 1
map.data$color[i] <- inc.colors[map.data$colorIndex[i]]
}
}
dd <- map.data[with(map.data,order(-value)),]
map("state",regions=census.data$state,exact=FALSE,proj="polyconic",fill=TRUE,
col=map.data$color[match.map("state",regions=census.data$state,exact=FALSE,warn=TRUE)])
data.frame(pd=pd,dd=dd)
}
m <- drawMaps(census.data$state,census.data$pop2015,census.data$delta2015)
head(m,10)
m
drawMaps <- function(states,pop,delta) {
# Initialize plot region.
par(mfrow=c(2,1))
par(mar=c(0,0,0,0))
# White/blue palette for actual population.
nc <- 100
map.data <- data.frame(state=states,
value=pop,
colorIndex=integer(length(pop)),
color=character(length(pop)),
stringsAsFactors=FALSE)
colors <- colorRampPalette(c("white","darkblue"),space="rgb",interpolate="spline")(nc)
slope <- nc / max(map.data$value)
for (i in 1:length(map.data$value)) {
map.data$colorIndex[i] <- round(map.data$value[i] * slope)
if (map.data$colorIndex[i] == 0) map.data$colorIndex[i] <- 1
map.data$color[i] <- colors[map.data$colorIndex[i]]
}
pd <- map.data[with(map.data,order(-value)),]
# map.data[map.data$state=="california","state"] <- "californiaxx"
map("state",regions=census.data$state,exact=FALSE,proj="polyconic",fill=TRUE,
col=map.data$color[match.map("state",regions=census.data$state,exact=FALSE,warn=TRUE)])
# Red/white/green palette for changes in population.
nc <- 50        # One half the number of colors.
map.data <- data.frame(states,
value=delta,
colorIndex=integer(length(delta)),
color=character(length(delta)),
stringsAsFactors=FALSE)
inc.colors <- colorRampPalette(c("white","darkgreen"))(nc)
inc.slope = abs(nc / max(map.data$value))
dec.colors <- colorRampPalette(c("white","darkred"))(nc)
dec.slope = abs(nc / min(map.data$value))
for (i in 1:length(map.data$value)) {
if (map.data$value[i] < 0) {
map.data$colorIndex[i] <- round(abs(map.data$value[i] * dec.slope))
if (map.data$colorIndex[i] == 0) map.data$colorIndex[i] <- 1
map.data$color[i] <- dec.colors[map.data$colorIndex[i]]
}
else {
map.data$colorIndex[i] <- round(abs(map.data$value[i] * inc.slope))
if (map.data$colorIndex[i] == 0) map.data$colorIndex[i] <- 1
map.data$color[i] <- inc.colors[map.data$colorIndex[i]]
}
}
dd <- map.data[with(map.data,order(-value)),]
map("state",regions=census.data$state,exact=FALSE,proj="polyconic",fill=TRUE,
col=map.data$color[match.map("state",regions=census.data$state,exact=FALSE,warn=TRUE)])
data.frame(pd=pd,dd=dd)
}
m <- drawMaps(census.data$state,census.data$pop2015,census.data$delta2015)
m
runApp()
setwd("~/Academic/DataScience/DevelopDataProducts/mapProject/prod")
appRun()
runApp()
setwd("~/Academic/DataScience/DevelopDataProducts-Project/master")
runApp()
deployApp()
